!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AVG_MOBILE	src/generateRandomGraph.c	5;"	d	file:
AreTwoVerticesConnected	src/schedulerAlgo.c	/^int AreTwoVerticesConnected(uint32_t retVertexA, uint32_t retVertexB)$/;"	f
BEGIN	src/lex.yy.c	125;"	d	file:
DELAY_BOUND_SCHED_ALGO	src/schedulerAlgo.c	15;"	d	file:
DELAY_THRESHOLD_HOPS	src/routingPath.c	6;"	d	file:
ECHO	src/lex.yy.c	613;"	d	file:
EOB_ACT_CONTINUE_SCAN	src/lex.yy.c	168;"	d	file:
EOB_ACT_END_OF_FILE	src/lex.yy.c	169;"	d	file:
EOB_ACT_LAST_MATCH	src/lex.yy.c	170;"	d	file:
EXIT_SUCCESS	src/y.tab.c	344;"	d	file:
EXIT_SUCCESS	src/y.tab.c	372;"	d	file:
FLEXINT_H	src/lex.yy.c	29;"	d	file:
FLEX_BETA	src/lex.yy.c	13;"	d	file:
FLEX_SCANNER	src/lex.yy.c	8;"	d	file:
FNAME	src/lex.yy.c	520;"	d	file:
INITIAL	src/lex.yy.c	518;"	d	file:
INT16_MAX	src/lex.yy.c	71;"	d	file:
INT16_MIN	src/lex.yy.c	62;"	d	file:
INT32_MAX	src/lex.yy.c	74;"	d	file:
INT32_MIN	src/lex.yy.c	65;"	d	file:
INT8_MAX	src/lex.yy.c	68;"	d	file:
INT8_MIN	src/lex.yy.c	59;"	d	file:
IncludeCfg	src/y.tab.c	/^     IncludeCfg = 261$/;"	e	enum:yytokentype	file:
IncludeCfg	src/y.tab.c	184;"	d	file:
IsChannelAvailableAtRx	src/schedulerAlgo.c	/^int IsChannelAvailableAtRx(int node, int slot, int channel)$/;"	f
IsChannelAvailableAtTx	src/schedulerAlgo.c	/^int IsChannelAvailableAtTx(int node, int slot, int channel)$/;"	f
IsNodeReceiver	src/schedulerAlgo.c	/^int IsNodeReceiver(int slot, int channel, int nodeToCheck)$/;"	f
IsNodeTransmitter	src/schedulerAlgo.c	/^int IsNodeTransmitter(int slot, int channel, int nodeToCheck)$/;"	f
IsPacketToBeDropped	src/randomfunc.c	/^int IsPacketToBeDropped(double errorValue)$/;"	f
KEY	src/y.tab.c	/^     KEY = 259,$/;"	e	enum:yytokentype	file:
KEY	src/y.tab.c	182;"	d	file:
LARGE_BOUND	src/generateRandomGraph.c	3;"	d	file:
MAX_CHANNELS_SCHED_ALGO	src/schedulerAlgo.c	8;"	d	file:
MAX_HOPS_SCHED_ALGO	src/schedulerAlgo.c	9;"	d	file:
MAX_INFRA	src/generateRandomGraph.c	7;"	d	file:
MAX_MOBILE	src/generateRandomGraph.c	8;"	d	file:
MAX_NODES_SCHED_ALGO	src/schedulerAlgo.c	5;"	d	file:
MAX_SLOTS_SCHED_ALGO	src/schedulerAlgo.c	6;"	d	file:
MAX_VERTICES_SCHED_ALGO	src/schedulerAlgo.c	11;"	d	file:
MEAN_CALL_DURATION	src/simulation.c	/^double MEAN_CALL_DURATION = 0;$/;"	v
MEAN_CALL_FREQUENCY	src/simulation.c	/^double MEAN_CALL_FREQUENCY = 0;$/;"	v
MEAN_VOICE_CALL_DURATION	src/simulation.c	/^double MEAN_VOICE_CALL_DURATION = 0;$/;"	v
NUMBER	src/y.tab.c	/^     NUMBER = 258,$/;"	e	enum:yytokentype	file:
NUMBER	src/y.tab.c	181;"	d	file:
PRINT_UNIT	src/simulation.c	3;"	d	file:
RAND_INIT	src/simulation.c	4;"	d	file:
REAL_SLOTS	src/schedulerAlgo.c	7;"	d	file:
REJECT	src/lex.yy.c	500;"	d	file:
SMALL_BOUND	src/generateRandomGraph.c	4;"	d	file:
SOURCE_SCHED_ALGO	src/schedulerAlgo.c	13;"	d	file:
START_FLOW_AT	src/handleScheduleTxRx.c	3;"	d	file:
STRING	src/y.tab.c	/^     STRING = 260,$/;"	e	enum:yytokentype	file:
STRING	src/y.tab.c	183;"	d	file:
STR_OPEN	src/lex.yy.c	519;"	d	file:
UINT16_MAX	src/lex.yy.c	80;"	d	file:
UINT32_MAX	src/lex.yy.c	83;"	d	file:
UINT8_MAX	src/lex.yy.c	77;"	d	file:
UNDEFINED_SCHED_ALGO	src/schedulerAlgo.c	14;"	d	file:
VALUE	src/lex.yy.c	521;"	d	file:
YYABORT	src/y.tab.c	641;"	d	file:
YYACCEPT	src/y.tab.c	640;"	d	file:
YYBACKUP	src/y.tab.c	662;"	d	file:
YYBISON	src/y.tab.c	44;"	d	file:
YYBISON_VERSION	src/y.tab.c	47;"	d	file:
YYCASE_	src/y.tab.c	1066;"	d	file:
YYCASE_	src/y.tab.c	1076;"	d	file:
YYCOPY	src/y.tab.c	438;"	d	file:
YYCOPY	src/y.tab.c	441;"	d	file:
YYCOPY_NEEDED	src/y.tab.c	413;"	d	file:
YYDEBUG	src/y.tab.c	162;"	d	file:
YYDPRINTF	src/y.tab.c	705;"	d	file:
YYDPRINTF	src/y.tab.c	852;"	d	file:
YYEMPTY	src/y.tab.c	637;"	d	file:
YYEOF	src/y.tab.c	638;"	d	file:
YYERRCODE	src/y.tab.c	681;"	d	file:
YYERROR	src/y.tab.c	642;"	d	file:
YYERROR_VERBOSE	src/y.tab.c	150;"	d	file:
YYERROR_VERBOSE	src/y.tab.c	151;"	d	file:
YYERROR_VERBOSE	src/y.tab.c	153;"	d	file:
YYFAIL	src/y.tab.c	652;"	d	file:
YYFINAL	src/y.tab.c	454;"	d	file:
YYFPRINTF	src/y.tab.c	702;"	d	file:
YYFREE	src/y.tab.c	383;"	d	file:
YYID	src/y.tab.c	/^YYID (int yyi)$/;"	f	file:
YYID	src/y.tab.c	306;"	d	file:
YYINITDEPTH	src/y.tab.c	861;"	d	file:
YYLAST	src/y.tab.c	456;"	d	file:
YYLEX	src/y.tab.c	692;"	d	file:
YYLEX	src/y.tab.c	694;"	d	file:
YYMALLOC	src/y.tab.c	376;"	d	file:
YYMAXDEPTH	src/y.tab.c	872;"	d	file:
YYMAXUTOK	src/y.tab.c	469;"	d	file:
YYNNTS	src/y.tab.c	461;"	d	file:
YYNRULES	src/y.tab.c	463;"	d	file:
YYNSTATES	src/y.tab.c	465;"	d	file:
YYNTOKENS	src/y.tab.c	459;"	d	file:
YYPACT_NINF	src/y.tab.c	586;"	d	file:
YYPOPSTACK	src/y.tab.c	1229;"	d	file:
YYPULL	src/y.tab.c	59;"	d	file:
YYPURE	src/y.tab.c	53;"	d	file:
YYPUSH	src/y.tab.c	56;"	d	file:
YYRECOVERING	src/y.tab.c	660;"	d	file:
YYSIZE_MAXIMUM	src/y.tab.c	274;"	d	file:
YYSIZE_T	src/y.tab.c	262;"	d	file:
YYSIZE_T	src/y.tab.c	264;"	d	file:
YYSIZE_T	src/y.tab.c	268;"	d	file:
YYSIZE_T	src/y.tab.c	270;"	d	file:
YYSKELETON_NAME	src/y.tab.c	50;"	d	file:
YYSTACK_ALLOC	src/y.tab.c	329;"	d	file:
YYSTACK_ALLOC	src/y.tab.c	333;"	d	file:
YYSTACK_ALLOC	src/y.tab.c	338;"	d	file:
YYSTACK_ALLOC	src/y.tab.c	362;"	d	file:
YYSTACK_ALLOC_MAXIMUM	src/y.tab.c	359;"	d	file:
YYSTACK_ALLOC_MAXIMUM	src/y.tab.c	365;"	d	file:
YYSTACK_BYTES	src/y.tab.c	409;"	d	file:
YYSTACK_FREE	src/y.tab.c	353;"	d	file:
YYSTACK_FREE	src/y.tab.c	363;"	d	file:
YYSTACK_GAP_MAXIMUM	src/y.tab.c	405;"	d	file:
YYSTACK_RELOCATE	src/y.tab.c	420;"	d	file:
YYSTATE	src/lex.yy.c	132;"	d	file:
YYSTYPE	src/y.tab.c	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	src/y.tab.c	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE_IS_DECLARED	src/y.tab.c	203;"	d	file:
YYSTYPE_IS_TRIVIAL	src/y.tab.c	201;"	d	file:
YYTABLES_NAME	src/lex.yy.c	1913;"	d	file:
YYTABLE_NINF	src/y.tab.c	603;"	d	file:
YYTERROR	src/y.tab.c	680;"	d	file:
YYTOKENTYPE	src/y.tab.c	170;"	d	file:
YYTRANSLATE	src/y.tab.c	471;"	d	file:
YYUNDEFTOK	src/y.tab.c	468;"	d	file:
YYUSE	src/y.tab.c	298;"	d	file:
YYUSE	src/y.tab.c	300;"	d	file:
YY_	src/y.tab.c	280;"	d	file:
YY_	src/y.tab.c	284;"	d	file:
YY_AT_BOL	src/lex.yy.c	339;"	d	file:
YY_BREAK	src/lex.yy.c	692;"	d	file:
YY_BUFFER_EOF_PENDING	src/lex.yy.c	255;"	d	file:
YY_BUFFER_NEW	src/lex.yy.c	243;"	d	file:
YY_BUFFER_NORMAL	src/lex.yy.c	244;"	d	file:
YY_BUFFER_STATE	src/lex.yy.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	src/lex.yy.c	149;"	d	file:
YY_BUF_SIZE	src/lex.yy.c	151;"	d	file:
YY_CHAR	src/lex.yy.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	src/lex.yy.c	271;"	d	file:
YY_CURRENT_BUFFER_LVALUE	src/lex.yy.c	278;"	d	file:
YY_DECL	src/lex.yy.c	680;"	d	file:
YY_DECL_IS_OURS	src/lex.yy.c	676;"	d	file:
YY_DO_BEFORE_ACTION	src/lex.yy.c	364;"	d	file:
YY_END_OF_BUFFER	src/lex.yy.c	372;"	d	file:
YY_END_OF_BUFFER_CHAR	src/lex.yy.c	140;"	d	file:
YY_EXIT_FAILURE	src/lex.yy.c	1711;"	d	file:
YY_EXTRA_TYPE	src/lex.yy.c	532;"	d	file:
YY_FATAL_ERROR	src/lex.yy.c	667;"	d	file:
YY_FLEX_MAJOR_VERSION	src/lex.yy.c	9;"	d	file:
YY_FLEX_MINOR_VERSION	src/lex.yy.c	10;"	d	file:
YY_FLEX_SUBMINOR_VERSION	src/lex.yy.c	11;"	d	file:
YY_FLUSH_BUFFER	src/lex.yy.c	307;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	src/y.tab.c	1151;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	src/y.tab.c	1152;"	d	file:
YY_INITIAL_VALUE	src/y.tab.c	1155;"	d	file:
YY_INPUT	src/lex.yy.c	620;"	d	file:
YY_INT_ALIGNED	src/lex.yy.c	4;"	d	file:
YY_LESS_LINENO	src/lex.yy.c	172;"	d	file:
YY_LOCATION_PRINT	src/y.tab.c	686;"	d	file:
YY_MORE_ADJ	src/lex.yy.c	502;"	d	file:
YY_NEW_FILE	src/lex.yy.c	138;"	d	file:
YY_NULL	src/lex.yy.c	112;"	d	file:
YY_NULL	src/y.tab.c	142;"	d	file:
YY_NULL	src/y.tab.c	144;"	d	file:
YY_NUM_RULES	src/lex.yy.c	371;"	d	file:
YY_READ_BUF_SIZE	src/lex.yy.c	602;"	d	file:
YY_READ_BUF_SIZE	src/lex.yy.c	604;"	d	file:
YY_REDUCE_PRINT	src/y.tab.c	842;"	d	file:
YY_REDUCE_PRINT	src/y.tab.c	855;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	src/lex.yy.c	503;"	d	file:
YY_RULE_SETUP	src/lex.yy.c	695;"	d	file:
YY_SC_TO_UI	src/lex.yy.c	119;"	d	file:
YY_STACK_PRINT	src/y.tab.c	804;"	d	file:
YY_STACK_PRINT	src/y.tab.c	854;"	d	file:
YY_START	src/lex.yy.c	131;"	d	file:
YY_START_STACK_INCR	src/lex.yy.c	662;"	d	file:
YY_STATE_BUF_SIZE	src/lex.yy.c	157;"	d	file:
YY_STATE_EOF	src/lex.yy.c	135;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	src/lex.yy.c	196;"	d	file:
YY_SYMBOL_PRINT	src/y.tab.c	711;"	d	file:
YY_SYMBOL_PRINT	src/y.tab.c	853;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	src/lex.yy.c	160;"	d	file:
YY_TYPEDEF_YY_SIZE_T	src/lex.yy.c	191;"	d	file:
YY_USER_ACTION	src/lex.yy.c	687;"	d	file:
YY_USE_CONST	src/lex.yy.c	100;"	d	file:
YY_USE_CONST	src/lex.yy.c	93;"	d	file:
YY_YY_Y_TAB_H_INCLUDED	src/y.tab.c	159;"	d	file:
__STDC_LIMIT_MACROS	src/lex.yy.c	39;"	d	file:
__attribute__	src/y.tab.c	292;"	d	file:
abc	src/c_funda_clearing.c	/^struct abc$/;"	s	file:
activeFlowIDTime	src/simulation.c	/^double activeFlowIDTime[2000];$/;"	v
alloca	src/y.tab.c	336;"	d	file:
anyAncestorIsDead	src/rootfunc.c	/^int anyAncestorIsDead(int node)$/;"	f
applyJoinPolicy	src/rootfunc.c	/^int applyJoinPolicy(int node)$/;"	f
at	src/simulation.c	/^FILE * at;$/;"	v
bufferVoiceMsgTime	src/rootfunc.c	/^double bufferVoiceMsgTime()$/;"	f
calcDelay	src/schedulerAlgo.c	/^int calcDelay(int prevSlot, int nextSlot)$/;"	f
callsNotHandedOff	src/simulation.c	/^int callsNotHandedOff = 0; \/\/ mobility change 6-5-10 $/;"	v
canInsertNextEvent	src/handleDataSlot.c	/^int canInsertNextEvent(int node, struct scheduleElement anElement, double nextEventTiming)$/;"	f
canSendMoreData	src/handleDataSlot.c	/^int canSendMoreData(int node, int flowId, int pkt_src, int pkt_dst)$/;"	f
canStartFlowRequest	src/handlePackets.c	/^int canStartFlowRequest(int node)$/;"	f
canStartVoiceFlowRequest	src/handlePackets.c	/^int canStartVoiceFlowRequest(int node)$/;"	f
checkFlowAdmission	src/scheduler.c	/^int checkFlowAdmission(struct routingPath *aPath)$/;"	f
checkIfSource	src/handlePackets.c	/^int checkIfSource(int node)$/;"	f
checkVoicePhases	src/rootfunc.c	/^int checkVoicePhases(int source, int destination) \/\/ why not make this function return a node rather than just simply 1$/;"	f
checkVoiceQueue	src/scheduler.c	/^void checkVoiceQueue()$/;"	f
chooseAppropriateDirection	src/handlePriorityQueue.c	/^int chooseAppropriateDirection(int new_x, int new_y)$/;"	f
chooseDestination	src/handlePackets.c	/^int chooseDestination(int node)$/;"	f
clearDataHistory	src/handleDataSlot.c	/^void clearDataHistory(int node)$/;"	f
constructVertex	src/schedulerAlgo.c	17;"	d	file:
contentionFrame	src/randomfunc.c	/^int contentionFrame(double probability)$/;"	f
contentionProbability	src/simulation.c	/^double contentionProbability = 1.0;$/;"	v
convertTreeToSchedElem	src/handleScheduleTxRx.c	/^int convertTreeToSchedElem(int rTree)$/;"	f
countUniqueCallsOriginated	src/simulation.c	/^int countUniqueCallsOriginated= 0;$/;"	v
currentScheduleTime	src/simulation.c	/^double currentScheduleTime = 0;$/;"	v
deAllocateFlowsForNodes	src/scheduler.c	/^int deAllocateFlowsForNodes(struct routingPath *aPath, int voiceMsg, char *str)$/;"	f
deAllocateSlotsForNodes	src/scheduler.c	/^int deAllocateSlotsForNodes(struct routingPath *aPath)$/;"	f
deAllocateState	src/scheduler.c	/^int deAllocateState(int flowId, int elementsToFree, int numOfSchedElem)$/;"	f
destinationIsUp	src/scheduler.c	/^int destinationIsUp(int destination)$/;"	f
destroyEvent	src/handlePriorityQueue.c	/^int destroyEvent(struct event * thisEvent)$/;"	f
dist	src/schedulerAlgo.c	/^int dist[MAX_VERTICES_SCHED_ALGO]; \/\/stores delay$/;"	v
dropInfraFlows	src/rootfunc.c	/^void dropInfraFlows(int node)$/;"	f
dump	src/simulation.c	/^FILE * dump;$/;"	v
endLoggingNodeStats	src/nodeStats.c	/^int endLoggingNodeStats()$/;"	f
endSimTime	src/simulation.c	/^double endSimTime = 4*60*60*1000; \/\/ i guess this is the default value of 4 hours$/;"	v
errorRate	src/simulation.c	/^double errorRate = 0.0;$/;"	v
eventQueueNotEmpty	src/handlePriorityQueue.c	/^int eventQueueNotEmpty()$/;"	f
exponDistriValue	src/randomfunc.c	/^double exponDistriValue(double x)$/;"	f
extractInput	src/input.c	/^int extractInput(char *filename)$/;"	f
extractSizeof	src/fragment.c	/^int extractSizeof(struct packetFormat * aPacket)$/;"	f
flex_int16_t	src/lex.yy.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	src/lex.yy.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	src/lex.yy.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	src/lex.yy.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	src/lex.yy.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	src/lex.yy.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	src/lex.yy.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	src/lex.yy.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	src/lex.yy.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	src/lex.yy.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	src/lex.yy.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	src/lex.yy.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
flowDoesNotExist	src/handleDataSlot.c	/^int flowDoesNotExist(int flowId)$/;"	f
flowDropDueToE2EPacketLosses	src/simulation.c	/^int flowDropDueToE2EPacketLosses = 0;$/;"	v
flowExists	src/scheduler.c	/^int flowExists(int flowId)$/;"	f
flowInProgress	src/handleDataSlot.c	/^int flowInProgress(int flowId)$/;"	f
flowRequestReceptionCounter	src/simulation.c	/^int flowRequestReceptionCounter = 0;$/;"	v
flowRequestsAdmitted	src/simulation.c	/^int flowRequestsAdmitted[MAX_SIM_CALLS];$/;"	v
flowRequestsReceived	src/simulation.c	/^int flowRequestsReceived[MAX_SIM_CALLS];$/;"	v
flowRequestsRejected	src/simulation.c	/^int flowRequestsRejected[MAX_SIM_CALLS]; \/\/ this is for logging that given a succesful number of calls, what are the flow requests received$/;"	v
flowTimeOutLimit	src/handlePackets.c	/^double flowTimeOutLimit = 30*1000;$/;"	v
flowWasNotAccepted	src/handlePriorityQueue.c	/^int flowWasNotAccepted(int flowId)$/;"	f
flowsPerNode	src/simulation.c	/^int flowsPerNode[MAX_NO_NODES]; \/\/number of flows per node, entries number$/;"	v
flushDijkstraStorage	src/schedulerAlgo.c	/^int flushDijkstraStorage()$/;"	f
generateTopologyUpdateTime	src/randomfunc.c	/^double generateTopologyUpdateTime(double time)$/;"	f
getAckTimeoutEvent	src/getEventStructures.c	/^struct event * getAckTimeoutEvent(double time, int node)$/;"	f
getAliveEvent	src/getEventStructures.c	/^struct event * getAliveEvent(double time, int node)$/;"	f
getBackoffContentionSlotEvent	src/getEventStructures.c	/^struct event * getBackoffContentionSlotEvent(double time, int node)$/;"	f
getBandwidthRequestEvent	src/getEventStructures.c	/^struct event * getBandwidthRequestEvent(double time, int flowId_bwRequest, int node, int destination, enum eventType type)$/;"	f
getBandwidthTimeoutEvent	src/getEventStructures.c	/^struct event * getBandwidthTimeoutEvent(double time, int flowId)$/;"	f
getCanStartFlowRequestEvent	src/getEventStructures.c	/^struct event * getCanStartFlowRequestEvent(double time, int node)$/;"	f
getChannel	src/schedulerAlgo.c	21;"	d	file:
getContentionReceptionEvent	src/getEventStructures.c	/^struct event * getContentionReceptionEvent(double time, int node, enum eventType type)$/;"	f
getContentionSlotEvent	src/getEventStructures.c	/^struct event * getContentionSlotEvent(double time, int node)$/;"	f
getCurrentTopology	src/handleScheduleTxRx.c	/^void getCurrentTopology(int infra)$/;"	f
getDataReceptionEvent	src/getEventStructures.c	/^struct event * getDataReceptionEvent(double time, int node, enum eventType type)$/;"	f
getDataSendEvent	src/getEventStructures.c	/^struct event * getDataSendEvent(double time, int node, struct scheduleElement inputElement)$/;"	f
getDataSourceSendEvent	src/getEventStructures.c	/^struct event * getDataSourceSendEvent(double time, int node, int length, int seqNumber, int e2eSource, int e2eDestination, int flowId, int source, int destination, int slotNo, enum eventType type)$/;"	f
getDeadEvent	src/getEventStructures.c	/^struct event * getDeadEvent(double time, int node)$/;"	f
getDestination	src/handlePackets.c	/^int getDestination(int node)$/;"	f
getFirstScheduleBroadcastTime	src/handleScheduleTxRx.c	/^double getFirstScheduleBroadcastTime(int node, int numOfFragments, int tempParent)$/;"	f
getFlowRequestEvent	src/getEventStructures.c	/^struct event * getFlowRequestEvent(double time, int flowSource, int flowDestination, int flowId_bwRequest, int node, int destination, enum eventType type)$/;"	f
getFlowRequestTimeoutEvent	src/getEventStructures.c	/^struct event * getFlowRequestTimeoutEvent(double time, int node)$/;"	f
getFreeSlot	src/scheduler.c	/^int getFreeSlot(int tx, int rx)$/;"	f
getGenerateFlowRequestEvent	src/getEventStructures.c	/^struct event * getGenerateFlowRequestEvent(double time, int flowId)$/;"	f
getHandleContentionSlotEvent	src/getEventStructures.c	/^struct event * getHandleContentionSlotEvent(double time, int node)$/;"	f
getHops	src/schedulerAlgo.c	22;"	d	file:
getJoinRequestEvent	src/getEventStructures.c	/^struct event * getJoinRequestEvent(double time, int joinSource, int node, int destination, enum eventType type)$/;"	f
getJoinRequestTimeoutEvent	src/getEventStructures.c	/^struct event * getJoinRequestTimeoutEvent(double time, int node)$/;"	f
getLinkLevelAckEvent	src/getEventStructures.c	/^struct event * getLinkLevelAckEvent(double time, int node, int destination, int type)$/;"	f
getMaxSlotsForNodes	src/scheduler.c	/^int getMaxSlotsForNodes(struct routingPath *aPath)$/;"	f
getMobilityEvent	src/getEventStructures.c	/^struct event * getMobilityEvent(double time)$/;"	f
getNewNextHop	src/handleDataSlot.c	/^int getNewNextHop(int node, int flowId, int pkt_src)$/;"	f
getNewScheduleParamEvent	src/getEventStructures.c	/^struct event * getNewScheduleParamEvent(double time, int node)$/;"	f
getNewSlot	src/handleDataSlot.c	/^int getNewSlot(int node, int flowId, int pkt_src)$/;"	f
getNextDataTransmitTime	src/handleDataSlot.c	/^double getNextDataTransmitTime(double nextDataBoundary, int numSlots)$/;"	f
getNextExpectedFragmentEvent	src/getEventStructures.c	/^struct event * getNextExpectedFragmentEvent(double time, int node, int infra)$/;"	f
getNextExpectedScheduleEvent	src/getEventStructures.c	/^struct event * getNextExpectedScheduleEvent(double time, int node)$/;"	f
getNextExpectedScheduleTime	src/handleScheduleTxRx.c	/^double getNextExpectedScheduleTime(double thisTime, int numOfFragments, int setTest)$/;"	f
getNextFlowRequestEvent	src/getEventStructures.c	/^struct event * getNextFlowRequestEvent(double time, int node)$/;"	f
getNextScheduleBroadcastTime	src/handleScheduleTxRx.c	/^double getNextScheduleBroadcastTime(int node, int numOfFragments)$/;"	f
getNode	src/schedulerAlgo.c	19;"	d	file:
getNodeDisablingEvent	src/getEventStructures.c	/^struct event * getNodeDisablingEvent(double time)$/;"	f
getNonInterferringChannel	src/scheduler.c	/^int getNonInterferringChannel(int tx, int rx, int slot)$/;"	f
getNumOfFragments	src/fragment.c	/^int getNumOfFragments(int numofSchedElem)$/;"	f
getNumOfHops	src/handleScheduleTxRx.c	/^int getNumOfHops(int node)$/;"	f
getParent	src/handleScheduleTxRx.c	/^int getParent(int node)$/;"	f
getPosition	src/getEventStructures.c	/^void getPosition(int node, int *x, int *y, double time)$/;"	f
getRSSI	src/getEventStructures.c	/^int getRSSI(int source, int destination, double time)$/;"	f
getRoutingPath	src/routingPath.c	/^struct routingPath * getRoutingPath(int source, int destination)$/;"	f
getScheduleEvent	src/getEventStructures.c	/^struct event * getScheduleEvent(double time, int tx, int rx, enum eventType type)$/;"	f
getSchedulePacket	src/getEventStructures.c	/^struct schedule * getSchedulePacket(double time, int node)$/;"	f
getScheduleReceptionTimeout	src/getEventStructures.c	/^struct event * getScheduleReceptionTimeout(double time, int node)$/;"	f
getSlot	src/schedulerAlgo.c	20;"	d	file:
getSplitSchedulingElements	src/fragment.c	/^int getSplitSchedulingElements()$/;"	f
getStartMobilityEvent	src/getEventStructures.c	/^struct event * getStartMobilityEvent(double time, int mobile_node, int direction)$/;"	f
getStopMobilityEvent	src/getEventStructures.c	/^struct event * getStopMobilityEvent(double time, int mobile_node)$/;"	f
getStopTransmissionEvent	src/getEventStructures.c	/^struct event * getStopTransmissionEvent(double time, int node)$/;"	f
getStorageCapacityEvent	src/getEventStructures.c	/^struct event * getStorageCapacityEvent(double time)$/;"	f
getTearDownEvent	src/getEventStructures.c	/^struct event * getTearDownEvent(double time, int flowId, int node, int destination, enum eventType type)$/;"	f
getTopologyCheckEvent	src/getEventStructures.c	/^struct event * getTopologyCheckEvent(double time)$/;"	f
getTopologyUpdateEvent	src/getEventStructures.c	/^struct event * getTopologyUpdateEvent(double time, int source, int node, int destination, enum eventType type, int update_type)$/;"	f
getUnusedFlowId	src/handlePackets.c	/^int getUnusedFlowId()$/;"	f
getVoiceDestination	src/rootfunc.c	/^int getVoiceDestination(int source, int destination)$/;"	f
getVoiceFlowRequestEvent	src/getEventStructures.c	/^struct event * getVoiceFlowRequestEvent(double time, int flowSource, int flowId_bwRequest, int node, int destination, int e2eDest, double voiceMsgDuration, enum eventType type)$/;"	f
getVoiceMsgCheckEvent	src/getEventStructures.c	/^struct event * getVoiceMsgCheckEvent(double time)$/;"	f
getVoiceMsgRelayEvent	src/getEventStructures.c	/^struct event * getVoiceMsgRelayEvent(int node, double time)$/;"	f
globalCallsInProgress	src/simulation.c	/^int globalCallsInProgress = 0;$/;"	v
globalLogFlowId	src/simulation.c	/^int globalLogFlowId = 1;\/\/for storing statistics of nodes$/;"	v
globalNextEventTime	src/simulation.c	/^double globalNextEventTime = UNDEFINED;$/;"	v
globalNumSchedElem	src/simulation.c	/^int globalNumSchedElem = 0;$/;"	v
globalScheduleElements	src/simulation.c	/^struct scheduleElement globalScheduleElements[MAX_SCHED_ELEMENTS];$/;"	v	typeref:struct:scheduleElement
globalSlotNo	src/simulation.c	/^int globalSlotNo = UNDEFINED; \/\/wats the purpose of this$/;"	v
globalUniqueFlowId	src/simulation.c	/^int globalUniqueFlowId = 1; \/\/whats this for? for each unique flow$/;"	v
globalUniqueVoiceFlowId	src/simulation.c	/^int globalUniqueVoiceFlowId = 1;$/;"	v
globalVoiceCallsInProgress	src/simulation.c	/^int globalVoiceCallsInProgress = 0;$/;"	v
handleBwRequestRoot	src/rootfunc.c	/^int handleBwRequestRoot(struct packetFormat * aPacket)$/;"	f
handleBwRequestTimeout	src/rootfunc.c	/^int handleBwRequestTimeout(int flowId)$/;"	f
handleContentionPacketNode	src/handleContentionSlot.c	/^int handleContentionPacketNode(int node, struct packetFormat * aPacket)$/;"	f
handleContentionSlot	src/handleContentionSlot.c	/^int handleContentionSlot(int node)$/;"	f
handleExpectedFragmentReception	src/handleScheduleTxRx.c	/^void handleExpectedFragmentReception(int node, struct packetFormat * aPacket)$/;"	f
handleExpectedScheduleReception	src/handleScheduleTxRx.c	/^int handleExpectedScheduleReception(int node)$/;"	f
handleFlowAckTimeout	src/handlePackets.c	/^int handleFlowAckTimeout(int node)$/;"	f
handleFlowReceptionRoot	src/rootfunc.c	/^int handleFlowReceptionRoot(struct packetFormat * aPacket)$/;"	f
handleGenerateDataPacket	src/handleDataSlot.c	/^int handleGenerateDataPacket(int node, struct packetFormat * aPacket)$/;"	f
handleJoinAckTimeout	src/handlePackets.c	/^int handleJoinAckTimeout(int node)$/;"	f
handleJoinReceptionRoot	src/rootfunc.c	/^int handleJoinReceptionRoot(struct packetFormat * aPacket)$/;"	f
handleLinkAck	src/handleContentionSlot.c	/^int handleLinkAck(int node)$/;"	f
handleLinkAckTimeout	src/handleContentionSlot.c	/^int handleLinkAckTimeout(int node)$/;"	f
handleNewScheduleParam	src/handleScheduleTxRx.c	/^int handleNewScheduleParam(int node)$/;"	f
handleReceivedDataPacket	src/handleDataSlot.c	/^int handleReceivedDataPacket(int node, struct packetFormat * aPacket)$/;"	f
handleRequestTX	src/handleContentionSlot.c	/^int handleRequestTX(int node, struct packetFormat * aPacket)$/;"	f
handleScheduleBroadcast	src/handleScheduleTxRx.c	/^int handleScheduleBroadcast(int node, struct packetFormat * aPacket)$/;"	f
handleScheduleReception	src/handleScheduleTxRx.c	/^int handleScheduleReception(int node, struct packetFormat * aPacket)$/;"	f
handleScheduleReceptionTimeout	src/handleScheduleTxRx.c	/^int handleScheduleReceptionTimeout(int node)$/;"	f
handleTearDownRoot	src/rootfunc.c	/^int handleTearDownRoot(struct packetFormat * aPacket)$/;"	f
handleTopologyUpdateCheck	src/rootfunc.c	/^int handleTopologyUpdateCheck()$/;"	f
handleTopologyUpdateRoot	src/rootfunc.c	/^int handleTopologyUpdateRoot(struct packetFormat * aPacket)$/;"	f
handleTransmitDataPacket	src/handleDataSlot.c	/^int handleTransmitDataPacket(int node, struct packetFormat * aPacket)$/;"	f
handleVoiceFlowReceptionRoot	src/rootfunc.c	/^int handleVoiceFlowReceptionRoot(struct packetFormat * aPacket)$/;"	f
hopDistribution	src/simulation.c	/^int hopDistribution[MAX_NO_HOPS]; \/\/still to know hte function of this variable?logging how many flows had how many hops$/;"	v
incomingEdge	src/coordinateToGraph.c	/^int incomingEdge[MAX_NO_NODES];$/;"	v
initializeNodes	src/input.c	/^int initializeNodes()$/;"	f
initializeSimulation	src/simulation.c	/^int initializeSimulation()$/;"	f
initrand	src/randomfunc.c	/^void initrand(int value)$/;"	f
insertEvent	src/handlePriorityQueue.c	/^int insertEvent(struct event * thisEvent)$/;"	f
insertInDataQueue	src/handleDataSlot.c	/^int insertInDataQueue(int node, struct packetFormat * aPacket)$/;"	f
insertInQueue	src/handleContentionSlot.c	/^int insertInQueue(int node, struct packetFormat * aPacket)$/;"	f
interferenceRangeI	src/simulation.c	/^double transmissionRangeI = (double) 250, interferenceRangeI = (double) 350;$/;"	v
interferenceRangeM	src/simulation.c	/^double transmissionRangeM = (double) 150, interferenceRangeM = (double) 250;$/;"	v
isFlowActive	src/handleDataSlot.c	/^int isFlowActive(int flowId)$/;"	f
isFlowRevoked	src/scheduler.c	/^int isFlowRevoked(int flowId)$/;"	f
isNodeInTree	src/rootfunc.c	/^int isNodeInTree(int node)$/;"	f
isPartOfAnyFlow	src/handlePriorityQueue.c	/^int isPartOfAnyFlow(int node)$/;"	f
kval	src/y.tab.c	/^	char *sval, *kval;$/;"	m	union:YYSTYPE	file:
lastFlowRequest	src/simulation.c	/^struct flowRequest * lastFlowRequest = NULL;$/;"	v	typeref:struct:flowRequest
lastJoinRequest	src/simulation.c	/^struct nodeJoin * lastJoinRequest = NULL; \/\/ contains the node number$/;"	v	typeref:struct:nodeJoin
lastScheduleChange	src/simulation.c	/^double lastScheduleChange = 0; \/\/ likely to be changed$/;"	v
lastScheduleTime	src/simulation.c	/^double lastScheduleTime = 0; \/\/ likely to be changed$/;"	v
lastTearDown	src/simulation.c	/^struct tearDown * lastTearDown = NULL; \/\/contains the flowid$/;"	v	typeref:struct:tearDown
lastVoiceFlowRequest	src/simulation.c	/^struct voiceFlowRequest * lastVoiceFlowRequest = NULL;$/;"	v	typeref:struct:voiceFlowRequest
logFlowStats	src/nodeStats.c	/^int logFlowStats(int flowId, char *str, double value)$/;"	f
logMobilityStats	src/nodeStats.c	/^void logMobilityStats(enum logType type, int node, int infra, double time)$/;"	f
logNodeStats	src/nodeStats.c	/^int logNodeStats(int node, enum logType type, double value)$/;"	f
logStoreCap	src/nodeStats.c	/^int logStoreCap(int node, long int store_cap, double time)$/;"	f
logVoiceFlowStats	src/nodeStats.c	/^int logVoiceFlowStats(int flowId, char *str, double value)$/;"	f
main	src/c_funda_clearing.c	/^int main()$/;"	f
main	src/generateRandomGraph.c	/^int main() \/\/generateRandGraph();$/;"	f
main	src/simulation.c	/^int main(int argc, char *argv[])$/;"	f
marginFlowTimeOutLimit	src/handlePackets.c	/^double marginFlowTimeOutLimit = 5*1000;$/;"	v
maxTreeHops	src/handleScheduleTxRx.c	/^int maxTreeHops()$/;"	f
max_no_fragments	src/simulation.c	/^int max_no_fragments = 0; \/\/ node disable hack$/;"	v
minDistance	src/schedulerAlgo.c	/^int minDistance, tempDelay;	$/;"	v
minVertex	src/schedulerAlgo.c	/^uint32_t minVertex;$/;"	v
minirevokeElements	src/scheduler.c	/^int minirevokeElements(int flowId) \/\/ only for revoking the elements of the voice flow$/;"	f
monitorFlowQuality	src/handleDataSlot.c	/^int monitorFlowQuality(int node, struct data dPacket)$/;"	f
networkGraph	src/coordinateToGraph.c	/^int networkGraph[MAX_NO_NODES][MAX_NO_NODES];$/;"	v
nextEvent	src/handlePriorityQueue.c	/^struct event * nextEvent()$/;"	f
next_file	src/lex.yy.c	/^FILE* next_file;$/;"	v
next_state	src/lex.yy.c	/^YY_BUFFER_STATE next_state;$/;"	v
noOfCallsAdmitted	src/simulation.c	/^int noOfCallsAdmitted = 0; \/\/used$/;"	v
noOfCallsAdmitted_Unique	src/simulation.c	/^int noOfCallsAdmitted_Unique[MAX_FLOW_ID]; \/\/ manan change, for calculating the number of unique calls admitted$/;"	v
noOfCallsAdmitted_Unique_Calc	src/simulation.c	/^int noOfCallsAdmitted_Unique_Calc = 0;\/\/manan change, calculates the number of unique calls admitted$/;"	v
noOfCallsErrDropped	src/simulation.c	/^int noOfCallsErrDropped = 0; \/\/used$/;"	v
noOfCallsOriginated	src/simulation.c	/^int noOfCallsOriginated = 0; \/\/used$/;"	v
noOfCallsTimedOut	src/simulation.c	/^int noOfCallsTimedOut = 0; $/;"	v
noOfSuccessCalls	src/simulation.c	/^int noOfSuccessCalls = 0;$/;"	v
noOfSuccessVoiceCalls	src/simulation.c	/^int noOfSuccessVoiceCalls = 0;$/;"	v
noOfTotalFlowRequestsReceived	src/simulation.c	/^int noOfTotalFlowRequestsReceived = 0; \/\/used$/;"	v
noOfTotalFlowRequestsRejected	src/simulation.c	/^int noOfTotalFlowRequestsRejected = 0; \/\/used$/;"	v
noOfTotalVoiceFlowRequestsReceived	src/simulation.c	/^int noOfTotalVoiceFlowRequestsReceived = 0; \/\/used$/;"	v
noOfTotalVoiceFlowRequestsRejected	src/simulation.c	/^int noOfTotalVoiceFlowRequestsRejected = 0; \/\/used$/;"	v
noOfUniqueFlowRequestsReceived	src/simulation.c	/^int noOfUniqueFlowRequestsReceived = 0;$/;"	v
noOfUniqueVoiceFlowRequestsReceived	src/simulation.c	/^int noOfUniqueVoiceFlowRequestsReceived = 0;$/;"	v
noOfVoiceCallsAdmitted	src/simulation.c	/^int noOfVoiceCallsAdmitted = 0; \/\/used$/;"	v
noOfVoiceCallsOriginated	src/simulation.c	/^int noOfVoiceCallsOriginated = 0; \/\/used$/;"	v
noOfVoiceCallsTimedOut	src/simulation.c	/^int noOfVoiceCallsTimedOut = 0; $/;"	v
nodeIsMobile	src/handleDataSlot.c	/^int nodeIsMobile(int node, int flowId, int pkt_src)$/;"	f
nodeSoftStateAtRoot	src/simulation.c	/^double nodeSoftStateAtRoot[MAX_NO_NODES]; \/\/ portability changes$/;"	v
nodeSourceOfThisFlow	src/handleContentionSlot.c	/^int nodeSourceOfThisFlow(int node, int flowId)$/;"	f
nodeVisited	src/schedulerAlgo.c	/^int nodeVisited[MAX_VERTICES_SCHED_ALGO]; \/\/used during selection of a vertex for an iteration in Dijkstra's algorithm$/;"	v
numFlowRequestsReached	src/simulation.c	/^int numFlowRequestsReached[MAX_FLOW_ID];$/;"	v
numOfFlowsInProgress	src/simulation.c	/^int numOfFlowsInProgress = 0;$/;"	v
numOfInfraNodesInNetwork	src/simulation.c	/^int numOfInfraNodesInNetwork;$/;"	v
numOfInfraNodesInTree	src/simulation.c	/^int numOfInfraNodesInTree = 0;$/;"	v
numOfMobileNodesInNetwork	src/simulation.c	/^int numOfMobileNodesInNetwork;$/;"	v
numOfNodesInNetwork	src/simulation.c	/^int numOfNodesInNetwork;$/;"	v
numOfNodesInTree	src/simulation.c	/^int numOfNodesInTree = 0;$/;"	v
numOfPresentInfraNodesInTree	src/simulation.c	/^int numOfPresentInfraNodesInTree = 0;  \/\/ vijay had said that this are for the local views of the nodes in the tree. but then why arent they arrays??$/;"	v
numOfPresentNodesInTree	src/simulation.c	/^int numOfPresentNodesInTree = 0;$/;"	v
numOfPresentSchedElem	src/simulation.c	/^int numOfPresentSchedElem = 0;$/;"	v
numOfVoiceFlowsInProgress	src/simulation.c	/^int numOfVoiceFlowsInProgress = 0;$/;"	v
numPathsInVoiceCurrQueue	src/simulation.c	/^int numPathsInVoiceCurrQueue = 0;$/;"	v
numPathsInVoiceQueue	src/simulation.c	/^int numPathsInVoiceQueue = 0;$/;"	v
numSuccessCalls	src/simulation.c	/^int numSuccessCalls[MAX_FLOW_ID]; $/;"	v
numSuccessVoiceCalls	src/simulation.c	/^int numSuccessVoiceCalls[MAX_FLOW_ID];$/;"	v
numTimedOutCalls	src/simulation.c	/^int numTimedOutCalls[MAX_FLOW_ID];$/;"	v
numVoiceFlowRequestsReached	src/simulation.c	/^int numVoiceFlowRequestsReached[MAX_FLOW_ID];$/;"	v
numVoiceMsg	src/simulation.c	/^int numVoiceMsg = 0; \/\/ used to calculate the number of stored voice messages generated$/;"	v
nval	src/y.tab.c	/^	struct number nval;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::number	file:
parseCoordinateFile	src/coordinateToGraph.c	/^int parseCoordinateFile()$/;"	f
pendingTasks	src/fragment.c	/^int pendingTasks()$/;"	f
percentageCallDrop	src/simulation.c	/^double percentageCallDrop = (double)0;$/;"	v
performAveraging	src/handleScheduleTxRx.c	/^void performAveraging(int node, int infra, int rssi)$/;"	f
performDataAveraging	src/handleDataSlot.c	/^void performDataAveraging(int node, int infra, int rssi)$/;"	f
phasesPerNode	src/simulation.c	/^int phasesPerNode[MAX_NO_NODES][MAX_PHASES]; \/\/which node occupies what phases, entries 0 and 1$/;"	v
previousNode	src/schedulerAlgo.c	/^uint32_t previousNode[MAX_VERTICES_SCHED_ALGO]; \/\/used for back tracing$/;"	v
print	src/y.tab.c	/^void print(number num)$/;"	f
printDataQueue	src/handlePackets.c	/^void printDataQueue(int infra)$/;"	f
printEventQueue	src/handlePriorityQueue.c	/^int printEventQueue()$/;"	f
printNeighborInfo	src/simulation.c	/^void printNeighborInfo(int node)$/;"	f
printSchedulingElements	src/scheduler.c	/^int printSchedulingElements()$/;"	f
printSchedulingElements2	src/scheduler.c	/^int printSchedulingElements2()$/;"	f
printSlotChannelNodes	src/scheduler.c	/^int printSlotChannelNodes()$/;"	f
processEvent	src/handlePriorityQueue.c	/^int processEvent(struct event * thisEvent)$/;"	f
purgeNeighborInfo	src/rootfunc.c	/^void purgeNeighborInfo(int node)$/;"	f
purgeNodeInfo	src/rootfunc.c	/^void purgeNodeInfo(int node)$/;"	f
queueHead	src/simulation.c	/^struct event * queueHead = NULL;$/;"	v	typeref:struct:event
rand_val	src/randomfunc.c	/^double rand_val()$/;"	f
randdouble	src/randomfunc.c	/^double randdouble(double window)$/;"	f
real_time_call_counter	src/simulation.c	/^int real_time_call_counter = 0;$/;"	v
rebuildNeighborInfo	src/handlePriorityQueue.c	/^void rebuildNeighborInfo(int node)$/;"	f
recordFlow	src/nodeStats.c	/^int recordFlow(int flowId)$/;"	f
refreshDataQueue	src/handlePackets.c	/^void refreshDataQueue(int infra)$/;"	f
removeFromQueue	src/handleContentionSlot.c	/^int removeFromQueue(int node)$/;"	f
removeFromQueueAccidently	src/handleContentionSlot.c	/^int removeFromQueueAccidently(int node)$/;"	f
reshuffleFlowQueue	src/scheduler.c	/^int reshuffleFlowQueue(int flowId)$/;"	f
reshuffleQueue	src/handleDataSlot.c	/^int reshuffleQueue(int node, int index)$/;"	f
reshuffleVoiceCurrQueue	src/scheduler.c	/^void reshuffleVoiceCurrQueue(int voiceFlowId)$/;"	f
reshuffleVoiceQueue	src/scheduler.c	/^void reshuffleVoiceQueue(int voiceQueueFlowId)$/;"	f
resolve_name	src/simulation.c	/^void resolve_name(int event_no,char *event_name)$/;"	f
resolve_packet	src/simulation.c	/^void resolve_packet(int packet, char *packet_type)$/;"	f
revokeElements	src/scheduler.c	/^int revokeElements(int flowId)$/;"	f
revokeElementsSingleChannel	src/scheduler.c	/^int revokeElementsSingleChannel(int flowId)$/;"	f
revokeElements_schedAlgo	src/schedulerAlgo.c	/^int revokeElements_schedAlgo(int flowId)$/;"	f
revokeVoiceFlow	src/scheduler.c	/^void revokeVoiceFlow(int node, int phase) $/;"	f
revoke_flag	src/simulation.c	/^int revoke_flag = 0;$/;"	v
rootNextScheduleFragmentBroadcast	src/handleScheduleTxRx.c	/^double rootNextScheduleFragmentBroadcast(double time)$/;"	f
routingTree	src/simulation.c	/^int routingTree[MAX_NO_NODES*2];$/;"	v
scheduleFlowRequest	src/handlePackets.c	/^int scheduleFlowRequest(int node)$/;"	f
scheduleInterval	src/simulation.c	/^double scheduleInterval = FRAME_DURATION; \/\/shouldnt it be the time taken for the schedule to go down the tree? its the time required to acomodate all the flows$/;"	v
scheduleIsMissed	src/handlePackets.c	/^int scheduleIsMissed(int node)$/;"	f
schedulePacketChange	src/simulation.c	/^int schedulePacketChange = FALSE; \/\/ i guess this is for change in the schedule$/;"	v
scheduleSlots	src/simulation.c	/^int scheduleSlots = NO_OF_DATA_SLOTS; \/\/this gives the logical view of data slots across frames$/;"	v
scheduleTearDown	src/handlePackets.c	/^int scheduleTearDown(int node, int flowId)$/;"	f
scheduleVoiceFlowRequest	src/handlePackets.c	/^int scheduleVoiceFlowRequest(int node, int overalle2eDestination)$/;"	f
searchQueueIndex	src/handleDataSlot.c	/^int searchQueueIndex(int node, int flowId, int linkDestination)$/;"	f
setCarryForwardFlow	src/scheduler.c	/^void setCarryForwardFlow(int new_source, int temp_destination, int overalle2eDestination, int carryForward, int flowId)$/;"	f
setFlowActiveAtOfNewFlows	src/handleScheduleTxRx.c	/^int setFlowActiveAtOfNewFlows()$/;"	f
setFlowSentAtTime	src/handleContentionSlot.c	/^int setFlowSentAtTime(int flowId)$/;"	f
setScheduleInfo	src/handleScheduleTxRx.c	/^int setScheduleInfo()$/;"	f
setSchedule_shortestPath	src/schedulerAlgo.c	/^int setSchedule_shortestPath(uint16_t source, uint16_t destination, int flowId)$/;"	f
setSchedulingElements	src/scheduler.c	/^int setSchedulingElements(int source, int destination, int flowId, int incomingPhase, int carryForward, int handoff, struct routingPath * handoff_path)$/;"	f
setSchedulingElementsSingleChannel	src/scheduler.c	/^int setSchedulingElementsSingleChannel(int source, int destination, int flowId, int incomingPhase)$/;"	f
setUpNewSchedule	src/handlePackets.c	/^int setUpNewSchedule(int node)$/;"	f
short	src/y.tab.c	230;"	d	file:
simTime	src/simulation.c	/^double simTime = 0;$/;"	v
slotChannelNodes	src/simulation.c	/^int slotChannelNodes[NO_OF_DATA_SLOTS][MAX_NO_CHANNELS][MAX_NO_NODES]; \/\/if a node transmits in particular slot-channel, entries 0 and 1$/;"	v
slotsPerNode	src/simulation.c	/^int slotsPerNode[MAX_NO_NODES][NO_OF_DATA_SLOTS]; \/\/which node occupies which data slot, entries 0 and 1?thinking of adding 2$/;"	v
slotsPerNodeSC	src/simulation.c	/^int slotsPerNodeSC[MAX_NO_NODES]; \/\/SC was for single channel, no longer being used$/;"	v
startLoggingNodeStats	src/nodeStats.c	/^int startLoggingNodeStats()$/;"	f
sval	src/y.tab.c	/^	char *sval, *kval;$/;"	m	union:YYSTYPE	file:
tempDelay	src/schedulerAlgo.c	/^int minDistance, tempDelay;	$/;"	v
totalEventCount	src/handlePriorityQueue.c	/^int totalEventCount = 0;$/;"	v
transmissionRangeI	src/simulation.c	/^double transmissionRangeI = (double) 250, interferenceRangeI = (double) 350;$/;"	v
transmissionRangeM	src/simulation.c	/^double transmissionRangeM = (double) 150, interferenceRangeM = (double) 250;$/;"	v
uniq_time	src/simulation.c	/^int uniq_time[MAX_NO_NODES];$/;"	v
uniq_time_counter	src/simulation.c	/^int uniq_time_counter;$/;"	v
uniqueCallsDropped	src/simulation.c	/^int uniqueCallsDropped[MAX_FLOW_ID];$/;"	v
uniqueCallsOriginated	src/simulation.c	/^int uniqueCallsOriginated[MAX_FLOW_ID];$/;"	v
unput	src/lex.yy.c	188;"	d	file:
updateConnectivityInfo	src/handleDataSlot.c	/^int updateConnectivityInfo(int node, int infra, int rssi)$/;"	f
updateLocalTimings	src/simulation.c	/^int updateLocalTimings()$/;"	f
updateNeighborInfo	src/handleScheduleTxRx.c	/^void updateNeighborInfo(int node, int infra, int rssi)$/;"	f
var_name_to_nenum	src/y.tab.c	/^NVARS var_name_to_nenum(char *var)$/;"	f
var_name_to_senum	src/y.tab.c	/^SVARS var_name_to_senum(char *var)$/;"	f
vm	src/simulation.c	/^FILE * vm;$/;"	v
voiceFlowRequestsAdmitted	src/simulation.c	/^int voiceFlowRequestsAdmitted[MAX_SIM_CALLS];$/;"	v
voiceFlowRequestsReceived	src/simulation.c	/^int voiceFlowRequestsReceived[MAX_SIM_CALLS];$/;"	v
voiceFlowRequestsRejected	src/simulation.c	/^int voiceFlowRequestsRejected[MAX_SIM_CALLS]; \/\/ this is for logging that given a succesful number of calls, what are the flow requests received$/;"	v
voiceFlowsPerNode	src/simulation.c	/^int voiceFlowsPerNode[MAX_NO_NODES];$/;"	v
voiceHopDistribution	src/simulation.c	/^int voiceHopDistribution[MAX_NO_HOPS+10]; \/\/used for calculating the hop distribution of the voice messages, that is for paths of what no. of hops are the voice messages generated.$/;"	v
voice_end	src/simulation.c	/^FILE * voice_end;$/;"	v
voice_log	src/simulation.c	/^FILE * voice_log;$/;"	v
voice_start	src/simulation.c	/^FILE * voice_start;$/;"	v
x	src/c_funda_clearing.c	/^int x;$/;"	m	struct:abc	file:
y	src/c_funda_clearing.c	/^float y;$/;"	m	struct:abc	file:
yy_accept	src/lex.yy.c	/^static yyconst flex_int16_t yy_accept[62] =$/;"	v	file:
yy_at_bol	src/lex.yy.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	src/lex.yy.c	/^static yyconst flex_int16_t yy_base[71] =$/;"	v	file:
yy_bs_column	src/lex.yy.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	src/lex.yy.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	src/lex.yy.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	src/lex.yy.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	src/lex.yy.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	src/lex.yy.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	src/lex.yy.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	src/lex.yy.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	src/lex.yy.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	src/lex.yy.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	src/lex.yy.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	src/lex.yy.c	/^static yyconst flex_int16_t yy_chk[148] =$/;"	v	file:
yy_create_buffer	src/lex.yy.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	src/lex.yy.c	/^static yyconst flex_int16_t yy_def[71] =$/;"	v	file:
yy_delete_buffer	src/lex.yy.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	src/lex.yy.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	src/lex.yy.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	src/lex.yy.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	src/lex.yy.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	src/lex.yy.c	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	src/lex.yy.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	src/lex.yy.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	src/lex.yy.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	src/lex.yy.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	src/lex.yy.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	src/lex.yy.c	/^static char yy_hold_char;$/;"	v	file:
yy_init	src/lex.yy.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	src/lex.yy.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	src/lex.yy.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	src/lex.yy.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	src/lex.yy.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	src/lex.yy.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	src/lex.yy.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	src/lex.yy.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	src/lex.yy.c	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	src/lex.yy.c	/^static yyconst flex_int32_t yy_meta[20] =$/;"	v	file:
yy_n_chars	src/lex.yy.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	src/lex.yy.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	src/lex.yy.c	317;"	d	file:
yy_nxt	src/lex.yy.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	src/lex.yy.c	/^static yyconst flex_int16_t yy_nxt[148] =$/;"	v	file:
yy_reduce_print	src/y.tab.c	/^yy_reduce_print (YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_scan_buffer	src/lex.yy.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	src/lex.yy.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )$/;"	f
yy_scan_string	src/lex.yy.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	src/lex.yy.c	329;"	d	file:
yy_set_interactive	src/lex.yy.c	319;"	d	file:
yy_size_t	src/lex.yy.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	src/y.tab.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	src/lex.yy.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	src/lex.yy.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	src/lex.yy.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	src/y.tab.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	src/y.tab.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_trans_info	src/lex.yy.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	src/lex.yy.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	src/lex.yy.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	src/lex.yy.c	/^void *yyalloc (yy_size_t  size )$/;"	f
yyalloc	src/y.tab.c	/^union yyalloc$/;"	u	file:
yychar	src/y.tab.c	/^int yychar;$/;"	v
yycheck	src/y.tab.c	/^static const yytype_int8 yycheck[] =$/;"	v	file:
yyclearin	src/y.tab.c	636;"	d	file:
yyconst	src/lex.yy.c	106;"	d	file:
yyconst	src/lex.yy.c	108;"	d	file:
yydebug	src/y.tab.c	/^int yydebug;$/;"	v
yydefact	src/y.tab.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	src/y.tab.c	/^static const yytype_int8 yydefgoto[] =$/;"	v	file:
yydestruct	src/y.tab.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	src/lex.yy.c	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	src/y.tab.c	635;"	d	file:
yyerror	src/y.tab.c	/^void yyerror(const char *str)$/;"	f
yyfree	src/lex.yy.c	/^void yyfree (void * ptr )$/;"	f
yyget_debug	src/lex.yy.c	/^int yyget_debug  (void)$/;"	f
yyget_in	src/lex.yy.c	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	src/lex.yy.c	/^int yyget_leng  (void)$/;"	f
yyget_lineno	src/lex.yy.c	/^int yyget_lineno  (void)$/;"	f
yyget_out	src/lex.yy.c	/^FILE *yyget_out  (void)$/;"	f
yyget_text	src/lex.yy.c	/^char *yyget_text  (void)$/;"	f
yyin	src/lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	src/lex.yy.c	/^    static int yyinput (void)$/;"	f	file:
yyleng	src/lex.yy.c	/^int yyleng;$/;"	v
yyless	src/lex.yy.c	1722;"	d	file:
yyless	src/lex.yy.c	1723;"	d	file:
yyless	src/lex.yy.c	175;"	d	file:
yylex_destroy	src/lex.yy.c	/^int yylex_destroy  (void)$/;"	f
yylineno	src/lex.yy.c	/^int yylineno = 1;$/;"	v
yymore	src/lex.yy.c	501;"	d	file:
yynerrs	src/y.tab.c	/^int yynerrs;$/;"	v
yyout	src/lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	src/y.tab.c	/^static const yytype_int8 yypact[] =$/;"	v	file:
yypact_value_is_default	src/y.tab.c	612;"	d	file:
yyparse	src/y.tab.c	/^yyparse (void *YYPARSE_PARAM)$/;"	f
yypgoto	src/y.tab.c	/^static const yytype_int8 yypgoto[] =$/;"	v	file:
yypop_buffer_state	src/lex.yy.c	/^void yypop_buffer_state (void)$/;"	f
yyprhs	src/y.tab.c	/^static const yytype_uint8 yyprhs[] =$/;"	v	file:
yypush_buffer_state	src/lex.yy.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	src/y.tab.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	src/y.tab.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	src/lex.yy.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	src/lex.yy.c	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrhs	src/y.tab.c	/^static const yytype_int8 yyrhs[] =$/;"	v	file:
yyrline	src/y.tab.c	/^static const yytype_uint8 yyrline[] =$/;"	v	file:
yyset_debug	src/lex.yy.c	/^void yyset_debug (int  bdebug )$/;"	f
yyset_in	src/lex.yy.c	/^void yyset_in (FILE *  in_str )$/;"	f
yyset_lineno	src/lex.yy.c	/^void yyset_lineno (int  line_number )$/;"	f
yyset_out	src/lex.yy.c	/^void yyset_out (FILE *  out_str )$/;"	f
yyss_alloc	src/y.tab.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	src/y.tab.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	src/y.tab.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	src/y.tab.c	903;"	d	file:
yystrlen	src/y.tab.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	src/y.tab.c	880;"	d	file:
yystype	src/y.tab.c	202;"	d	file:
yysyntax_error	src/y.tab.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	src/y.tab.c	/^static const yytype_uint8 yytable[] =$/;"	v	file:
yytable_value_is_error	src/y.tab.c	615;"	d	file:
yyterminate	src/lex.yy.c	657;"	d	file:
yytext	src/lex.yy.c	/^char *yytext;$/;"	v
yytext_ptr	src/lex.yy.c	354;"	d	file:
yytname	src/y.tab.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	src/y.tab.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	src/y.tab.c	/^   enum yytokentype {$/;"	g	file:
yytoknum	src/y.tab.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	src/y.tab.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	src/y.tab.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	src/y.tab.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	src/y.tab.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	src/y.tab.c	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	src/y.tab.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	src/y.tab.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	src/y.tab.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	src/y.tab.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	src/y.tab.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyunput	src/lex.yy.c	/^    static void yyunput (int c, register char * yy_bp )$/;"	f	file:
yyvs_alloc	src/y.tab.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywrap	src/y.tab.c	/^int yywrap()$/;"	f
